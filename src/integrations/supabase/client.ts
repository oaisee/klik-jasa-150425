
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pnkdbkjwrcnghhgmhzue.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBua2Ria2p3cmNuZ2hoZ21oenVlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQzNTc4NzcsImV4cCI6MjA1OTkzMzg3N30.w0tzlFFRtD90DY2KVjT4kvYu9vTZDkA_HJP4EKkqnmQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage
  }
});

// Helper function to check Supabase connection
export const checkSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('non_existent_table').select('*').limit(1);
    
    if (error && error.code === 'PGRST116') {
      // This is expected for a non-existent table but means connection works
      console.log('Supabase connection successful');
      return { success: true, message: 'Connection successful' };
    } else {
      console.error('Unexpected error or table exists:', error);
      return { success: false, message: error?.message || 'Unknown error' };
    }
  } catch (err) {
    console.error('Failed to connect to Supabase:', err);
    return { success: false, message: String(err) };
  }
};
