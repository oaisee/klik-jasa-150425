
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pnkdbkjwrcnghhgmhzue.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBua2Ria2p3cmNuZ2hoZ21oenVlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQzNTc4NzcsImV4cCI6MjA1OTkzMzg3N30.w0tzlFFRtD90DY2KVjT4kvYu9vTZDkA_HJP4EKkqnmQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage,
    detectSessionInUrl: true,
    flowType: 'implicit'
  }
});

// Helper function to check Supabase connection
export const checkSupabaseConnection = async () => {
  try {
    // Just check if we can connect to Supabase by getting the current session
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Supabase connection error:', error);
      return { success: false, message: error.message || 'Unknown error' };
    } else {
      console.log('Supabase connection successful');
      return { success: true, message: 'Connection successful' };
    }
  } catch (err) {
    console.error('Failed to connect to Supabase:', err);
    return { success: false, message: String(err) };
  }
};

// Helper function to debug logout issues
export const debugLogout = async () => {
  try {
    console.log("Starting logout process...");
    
    // Get current session before logout
    const beforeSession = await supabase.auth.getSession();
    console.log("Session before logout:", beforeSession);
    
    // Attempt to sign out
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      console.error("Logout error:", error);
      return { success: false, error };
    }
    
    // Check session after logout
    const afterSession = await supabase.auth.getSession();
    console.log("Session after logout:", afterSession);
    
    // Clear any local storage related to auth manually as a backup measure
    localStorage.removeItem('supabase.auth.token');
    
    return { success: true };
  } catch (err) {
    console.error("Exception during logout:", err);
    return { success: false, error: err };
  }
};
